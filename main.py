import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ChatType, ChatMemberStatus
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from pymongo import MongoClient
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')
MONGO_URI = os.getenv('MONGO_URI')
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID'))  # –î–æ–¥–∞–π—Ç–µ –≤–∞—à Telegram user_id —É .env —Ñ–∞–π–ª—ñ

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
if not API_TOKEN:
    raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ API_TOKEN –≤ .env —Ñ–∞–π–ª—ñ.")
if not MONGO_URI:
    raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ MONGO_URI –≤ .env —Ñ–∞–π–ª—ñ.")
if not ADMIN_USER_ID:
    raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ ADMIN_USER_ID –≤ .env —Ñ–∞–π–ª—ñ.")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
try:
    client = MongoClient(MONGO_URI)
    db = client['nc_helper_bot']
    chats_collection = db['chats']
    tickets_collection = db['tickets']
    # –¢–µ—Å—Ç–æ–≤–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    client.admin.command('ping')
    logging.info("–£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB.")
except Exception as e:
    logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ MongoDB: {e}")
    exit(1)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏
start_buttons = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='/dev'),
            KeyboardButton(text='/prod'),
            KeyboardButton(text='/all')
        ],
        [
            KeyboardButton(text='/tickets'),
            # KeyboardButton(text='/history'),
            KeyboardButton(text='/id'),
            KeyboardButton(text='/help')
        ]
    ],
    resize_keyboard=True
)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∞—Ç—É –≤ MongoDB
def save_chat(chat_data):
    try:
        existing = chats_collection.find_one({"chat_id": chat_data["chat_id"]})
        if not existing:
            chats_collection.insert_one(chat_data)
            logging.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–æ–≤–∏–π —á–∞—Ç: {chat_data}")
        else:
            chats_collection.update_one({"chat_id": chat_data["chat_id"]}, {"$set": chat_data})
            logging.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ —á–∞—Ç: {chat_data}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —á–∞—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö: {e}")


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è —Ç—ñ–∫–µ—Ç—ñ–≤
def get_close_ticket_keyboard(ticket_id: str):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ó–∞–∫—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç ‚úÖ", callback_data=f"close_{ticket_id}")
            ]
        ]
    )
    return keyboard


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≥—Ä—É–ø–∏ —á–∞—Ç—É
def get_assign_group_keyboard(chat_id: int):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="DEV", callback_data=f"assign_DEV_{chat_id}"),
                InlineKeyboardButton(text="PROD", callback_data=f"assign_PROD_{chat_id}")
            ]
        ]
    )
    return keyboard


# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó, –∫–æ–ª–∏ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –≤ —á–∞—Ç—ñ
@dp.my_chat_member()
async def on_my_chat_member(update: types.ChatMemberUpdated):
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è my_chat_member: {update}")
    try:
        if update.new_chat_member.user.id != bot.id:
            return

        old_status = update.old_chat_member.status
        new_status = update.new_chat_member.status

        # –†–µ–∞–≥—É—î–º–æ –ª–∏—à–µ —è–∫—â–æ –±–æ—Ç –±—É–≤ –¥–æ–¥–∞–Ω–∏–π –¥–æ —á–∞—Ç—É
        if old_status in [ChatMemberStatus.LEFT, ChatMemberStatus.KICKED] and new_status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR]:
            chat = update.chat
            chat_data = {
                "chat_id": chat.id,
                "type": chat.type,
                "title": chat.title if hasattr(chat, 'title') else None,
                "assigned_group": None
            }

            # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –π–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            try:
                test_message = await bot.send_message(chat.id, "ü§ñ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π –¥–æ —á–∞—Ç—É!")
                await asyncio.sleep(2)
                await test_message.delete()
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ: {e}")

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∞—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            save_chat(chat_data)

            # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            try:
                await bot.send_message(
                    ADMIN_USER_ID,
                    f"üîî –ù–æ–≤–∏–π —á–∞—Ç –¥–æ–¥–∞–Ω–æ:\n"
                    f"üîπ <b>ID —á–∞—Ç—É:</b> {chat.id}\n"
                    f"üîπ <b>–¢–∏–ø —á–∞—Ç—É:</b> {chat.type}\n"
                    f"üîπ <b>–ù–∞–∑–≤–∞ —á–∞—Ç—É:</b> {chat.title}",
                    parse_mode='HTML',
                    reply_markup=get_assign_group_keyboard(chat.id)
                )
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É on_my_chat_member: {e}")


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≥—Ä—É–ø–∏ —á–∞—Ç—É
@dp.callback_query(F.data.startswith('assign_'))
async def assign_chat_group(callback_query: types.CallbackQuery):
    data_parts = callback_query.data.split('_')
    group_name = data_parts[1]
    chat_id = int(data_parts[2])

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    chats_collection.update_one(
        {"chat_id": chat_id},
        {"$set": {"assigned_group": group_name}}
    )

    await callback_query.answer(f"–ß–∞—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –¥–æ –≥—Ä—É–ø–∏ {group_name}")
    await callback_query.message.edit_text(
        f"‚úÖ –ß–∞—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –¥–æ –≥—Ä—É–ø–∏ {group_name}."
    )


# –ö–æ–º–∞–Ω–¥–∞ /start —Ç–∞ /help (—Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ)
@dp.message(Command(commands=['start', 'help']), F.chat.type == ChatType.PRIVATE)
async def send_welcome(message: types.Message):
    welcome_text = (
        "üëã –í—ñ—Ç–∞—é! –Ø –¥–æ–ø–æ–º—ñ–∂–Ω–∏–π –±–æ—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —Ä—ñ–∑–Ω—ñ –≥—Ä—É–ø–∏.\n\n"
        "üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "‚û°Ô∏è <b>/dev [–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]</b> - –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É DEV-—á–∞—Ç–∏.\n"
        "‚û°Ô∏è <b>/prod [–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]</b> - –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É PROD-—á–∞—Ç–∏.\n"
        "‚û°Ô∏è <b>/all [–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]</b> - –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤—Å—ñ —á–∞—Ç–∏.\n"
        "‚û°Ô∏è <b>/tickets</b> - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ —Ç—ñ–∫–µ—Ç–∏.\n"
        "‚û°Ô∏è <b>/history</b> - –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–∫—Ä–∏—Ç–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤.\n"
        "‚û°Ô∏è <b>/id</b> - –û—Ç—Ä–∏–º–∞—Ç–∏ ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Ç—É.\n\n"
        "‚ÑπÔ∏è <b>–Ø–∫ –ø—Ä–∞—Ü—é—é—Ç—å —Ç—ñ–∫–µ—Ç–∏:</b>\n"
        "- –ü—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è —Ç—ñ–∫–µ—Ç.\n"
        "- –¢—ñ–∫–µ—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è —É –≤—Å—ñ—Ö —á–∞—Ç–∞—Ö, –∫—É–¥–∏ –≤—ñ–Ω –±—É–≤ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π.\n"
        "- –ö–æ–∂–µ–Ω —á–∞—Ç –º–æ–∂–µ –∑–∞–∫—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç –Ω–µ–∑–∞–ª–µ–∂–Ω–æ.\n"
        "- –ö–æ–ª–∏ —Ç—ñ–∫–µ—Ç –∑–∞–∫—Ä–∏—Ç–æ –≤ —É—Å—ñ—Ö —á–∞—Ç–∞—Ö, –≤—ñ–Ω –ø–µ—Ä–µ–º—ñ—â—É—î—Ç—å—Å—è –≤ —ñ—Å—Ç–æ—Ä—ñ—é.\n\n"
        "üîò –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ."
    )
    await message.reply(welcome_text, reply_markup=start_buttons, parse_mode='HTML')



# –ö–æ–º–∞–Ω–¥–∞ /id –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID —á–∞—Ç—É (—Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ)
@dp.message(Command(commands=['id']), F.chat.type == ChatType.PRIVATE)
async def send_chat_id(message: types.Message):
    chat = message.chat
    chat_id = chat.id
    chat_type = chat.type
    chat_name = chat.title if hasattr(chat, 'title') else (
        f"{message.from_user.first_name} {message.from_user.last_name}" if message.from_user.last_name else message.from_user.first_name
    )

    user_id = message.from_user.id

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await bot.send_message(
            user_id,
            f"üìå <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —á–∞—Ç:</b>\n"
            f"üîπ <b>ID —á–∞—Ç—É:</b> {chat_id}\n"
            f"üîπ <b>–¢–∏–ø —á–∞—Ç—É:</b> {chat_type}\n"
            f"üîπ <b>–ù–∞–∑–≤–∞ —á–∞—Ç—É:</b> {chat_name}",
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await message.reply(
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤–∏ –¥–æ–∑–≤–æ–ª–∏–ª–∏ –±–æ—Ç—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ ID —Ç—ñ–∫–µ—Ç–∞
def generate_ticket_id():
    import uuid
    return str(uuid.uuid4())


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É DEV —á–∞—Ç–∏ (—Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ)
@dp.message(Command(commands=['dev']), F.chat.type == ChatType.PRIVATE)
async def send_dev_message(message: types.Message):
    text = message.text.partition('/dev ')[2]
    if not text:
        await message.reply("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è /dev –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.")
        return

    ticket_id = generate_ticket_id()
    ticket_data = {
        "ticket_id": ticket_id,
        "status": {},
        "text": text,
        "message_ids": []
    }

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —á–∞—Ç–∏, –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –¥–æ –≥—Ä—É–ø–∏ DEV
    dev_chats = chats_collection.find({"assigned_group": "DEV"})
    for chat in dev_chats:
        try:
            sent_message = await bot.send_message(
                chat["chat_id"], f"üõ†Ô∏è <b>{text}</b>",
                parse_mode='HTML', reply_markup=get_close_ticket_keyboard(ticket_id)
            )
            ticket_data["message_ids"].append({
                "chat_id": chat["chat_id"],
                "message_id": sent_message.message_id
            })
            ticket_data["status"][str(chat["chat_id"])] = "open"
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç {chat['chat_id']}: {e}")

    tickets_collection.insert_one(ticket_data)
    await message.reply(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É DEV —á–∞—Ç–∏: {text}")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É PROD —á–∞—Ç–∏ (—Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ)
@dp.message(Command(commands=['prod']), F.chat.type == ChatType.PRIVATE)
async def send_prod_message(message: types.Message):
    text = message.text.partition('/prod ')[2]
    if not text:
        await message.reply("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è /prod –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.")
        return

    ticket_id = generate_ticket_id()
    ticket_data = {
        "ticket_id": ticket_id,
        "status": {},
        "text": text,
        "message_ids": []
    }

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —á–∞—Ç–∏, –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –¥–æ –≥—Ä—É–ø–∏ PROD
    prod_chats = chats_collection.find({"assigned_group": "PROD"})
    for chat in prod_chats:
        try:
            sent_message = await bot.send_message(
                chat["chat_id"], f"üöÄ <b>{text}</b>",
                parse_mode='HTML', reply_markup=get_close_ticket_keyboard(ticket_id)
            )
            ticket_data["message_ids"].append({
                "chat_id": chat["chat_id"],
                "message_id": sent_message.message_id
            })
            ticket_data["status"][str(chat["chat_id"])] = "open"
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç {chat['chat_id']}: {e}")

    tickets_collection.insert_one(ticket_data)
    await message.reply(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É PROD —á–∞—Ç–∏: {text}")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –≤—Å—ñ —á–∞—Ç–∏ (—Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ)
@dp.message(Command(commands=['all']), F.chat.type == ChatType.PRIVATE)
async def send_all_message(message: types.Message):
    text = message.text.partition('/all ')[2]
    if not text:
        await message.reply("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è /all –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.")
        return

    ticket_id = generate_ticket_id()
    ticket_data = {
        "ticket_id": ticket_id,
        "status": {},
        "text": text,
        "message_ids": []
    }

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —á–∞—Ç–∏, –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≥—Ä—É–ø–∏
    all_chats = chats_collection.find({"assigned_group": {"$in": ["DEV", "PROD"]}})
    for chat in all_chats:
        try:
            sent_message = await bot.send_message(
                chat["chat_id"], f"üì¢ <b>{text}</b>",
                parse_mode='HTML', reply_markup=get_close_ticket_keyboard(ticket_id)
            )
            ticket_data["message_ids"].append({
                "chat_id": chat["chat_id"],
                "message_id": sent_message.message_id
            })
            ticket_data["status"][str(chat["chat_id"])] = "open"
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç {chat['chat_id']}: {e}")

    tickets_collection.insert_one(ticket_data)
    await message.reply(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É –≤—Å—ñ —á–∞—Ç–∏: {text}")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑—É –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ)
@dp.message(Command(commands=['tickets']), F.chat.type == ChatType.PRIVATE)
async def show_tickets(message: types.Message):
    open_tickets = list(tickets_collection.find({"status": {"$ne": "closed"}}))
    if not open_tickets:
        await message.reply("‚ÑπÔ∏è –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤.")
        return

    response = "üìù <b>–í—ñ–¥–∫—Ä–∏—Ç—ñ —Ç—ñ–∫–µ—Ç–∏:</b>\n"
    for ticket in open_tickets:
        response += f"‚Ä¢ <b>{ticket['text']}</b>\n"

    await message.reply(response, parse_mode='HTML')


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑—É —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–∫—Ä–∏—Ç–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤ –∑ —Ç–µ–∫—Å—Ç–æ–º (—Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ)
@dp.message(Command(commands=['history']), F.chat.type == ChatType.PRIVATE)
async def show_history(message: types.Message):
    closed_tickets = list(tickets_collection.find({"status": "closed"}))
    if not closed_tickets:
        await message.reply("‚ÑπÔ∏è –ù–µ–º–∞—î –∑–∞–∫—Ä–∏—Ç–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤.")
        return

    response = "üìú <b>–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–∫—Ä–∏—Ç–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤:</b>\n"
    for ticket in closed_tickets:
        response += (
            f"‚Ä¢ <b>{ticket['text']}</b>\n"
            f"  –°—Ç–∞—Ç—É—Å: –∑–∞–∫—Ä–∏—Ç–æ\n\n"
        )

    await message.reply(response, parse_mode='HTML')


# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è —Ç—ñ–∫–µ—Ç–∞
@dp.callback_query(F.data.startswith('close_'))
async def close_ticket(callback_query: types.CallbackQuery):
    ticket_id = callback_query.data.split('_')[1]
    chat_id = str(callback_query.message.chat.id)
    ticket = tickets_collection.find_one({"ticket_id": ticket_id})

    if ticket:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç—ñ–∫–µ—Ç–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–∞—Ç—ñ
        if ticket["status"].get(chat_id) != "closed":
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç—ñ–∫–µ—Ç–∞ –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É
            ticket["status"][chat_id] = "closed"
            tickets_collection.update_one({"ticket_id": ticket_id}, {"$set": {"status": ticket["status"]}})
            await callback_query.answer("–¢—ñ–∫–µ—Ç –∑–∞–∫—Ä–∏—Ç–æ.")
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ
            new_text = callback_query.message.text + "\n\n‚úÖ <b>–¢—ñ–∫–µ—Ç –∑–∞–∫—Ä–∏—Ç–æ.</b>"
            new_text = new_text.replace("üõ†Ô∏è", "‚úÖ").replace("üöÄ", "‚úÖ").replace("üì¢", "‚úÖ")
            try:
                await bot.edit_message_text(
                    text=new_text,
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    parse_mode='HTML'
                )
            except Exception as e:
                logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ {callback_query.message.chat.id}: {e}")
        else:
            await callback_query.answer("‚ùå –¢—ñ–∫–µ—Ç –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–æ.")
    else:
        await callback_query.answer("‚ùå –¢—ñ–∫–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


# –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥ —É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ
@dp.message(F.chat.type == ChatType.PRIVATE)
async def handle_unknown(message: types.Message):
    if message.text and message.text.startswith('/'):
        await message.reply("‚ùì –Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.")
    else:
        await message.reply("–í–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–ª–µ —è –Ω–µ –º–æ–∂—É –π–æ–≥–æ –æ–±—Ä–æ–±–∏—Ç–∏.")


if __name__ == '__main__':
    async def main():
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling(bot)


    asyncio.run(main())
